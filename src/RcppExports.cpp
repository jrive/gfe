// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// computeZ_cpp
arma::mat computeZ_cpp(const Rcpp::List& zList, const Rcpp::NumericMatrix& theta, const Rcpp::IntegerVector& groups);
RcppExport SEXP _gfe_computeZ_cpp(SEXP zListSEXP, SEXP thetaSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type zList(zListSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(computeZ_cpp(zList, theta, groups));
    return rcpp_result_gen;
END_RCPP
}
// computeZ_res_cpp
arma::mat computeZ_res_cpp(List zList, NumericVector theta);
RcppExport SEXP _gfe_computeZ_res_cpp(SEXP zListSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type zList(zListSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(computeZ_res_cpp(zList, theta));
    return rcpp_result_gen;
END_RCPP
}
// computeAlpha_cpp
arma::mat computeAlpha_cpp(const arma::mat& Z, const IntegerVector& groups);
RcppExport SEXP _gfe_computeAlpha_cpp(SEXP ZSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(computeAlpha_cpp(Z, groups));
    return rcpp_result_gen;
END_RCPP
}
// computeSigma_cpp
arma::vec computeSigma_cpp(List zList, const NumericMatrix& theta, const IntegerVector& groupR);
RcppExport SEXP _gfe_computeSigma_cpp(SEXP zListSEXP, SEXP thetaSEXP, SEXP groupRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type zList(zListSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type groupR(groupRSEXP);
    rcpp_result_gen = Rcpp::wrap(computeSigma_cpp(zList, theta, groupR));
    return rcpp_result_gen;
END_RCPP
}
// computeResiduals_cpp
arma::vec computeResiduals_cpp(const Rcpp::List& zList, const Rcpp::NumericMatrix& theta, const Rcpp::IntegerVector& groups, const Rcpp::NumericMatrix& alpha);
RcppExport SEXP _gfe_computeResiduals_cpp(SEXP zListSEXP, SEXP thetaSEXP, SEXP groupsSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type zList(zListSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(computeResiduals_cpp(zList, theta, groups, alpha));
    return rcpp_result_gen;
END_RCPP
}
// gfeObj_cpp
double gfeObj_cpp(const arma::mat& Z, const Rcpp::IntegerVector& groups);
RcppExport SEXP _gfe_gfeObj_cpp(SEXP ZSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(gfeObj_cpp(Z, groups));
    return rcpp_result_gen;
END_RCPP
}
// wgfeObj_cpp
double wgfeObj_cpp(const arma::mat& Z, const Rcpp::IntegerVector& groups);
RcppExport SEXP _gfe_wgfeObj_cpp(SEXP ZSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(wgfeObj_cpp(Z, groups));
    return rcpp_result_gen;
END_RCPP
}
// wgfeObj_bs_cpp
double wgfeObj_bs_cpp(List z, NumericVector b, IntegerVector group, NumericVector sigg, double sig);
RcppExport SEXP _gfe_wgfeObj_bs_cpp(SEXP zSEXP, SEXP bSEXP, SEXP groupSEXP, SEXP siggSEXP, SEXP sigSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigg(siggSEXP);
    Rcpp::traits::input_parameter< double >::type sig(sigSEXP);
    rcpp_result_gen = Rcpp::wrap(wgfeObj_bs_cpp(z, b, group, sigg, sig));
    return rcpp_result_gen;
END_RCPP
}
// slopeGradGFE_cpp
arma::vec slopeGradGFE_cpp(List z, IntegerVector group);
RcppExport SEXP _gfe_slopeGradGFE_cpp(SEXP zSEXP, SEXP groupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type z(zSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type group(groupSEXP);
    rcpp_result_gen = Rcpp::wrap(slopeGradGFE_cpp(z, group));
    return rcpp_result_gen;
END_RCPP
}
// calcGroupSlopes_cpp
arma::mat calcGroupSlopes_cpp(const Rcpp::List& zList, const Rcpp::IntegerVector& groups);
RcppExport SEXP _gfe_calcGroupSlopes_cpp(SEXP zListSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type zList(zListSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(calcGroupSlopes_cpp(zList, groups));
    return rcpp_result_gen;
END_RCPP
}
// computeXXY_demeaned_cpp
List computeXXY_demeaned_cpp(List zList, const IntegerVector& wgroups);
RcppExport SEXP _gfe_computeXXY_demeaned_cpp(SEXP zListSEXP, SEXP wgroupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type zList(zListSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type wgroups(wgroupsSEXP);
    rcpp_result_gen = Rcpp::wrap(computeXXY_demeaned_cpp(zList, wgroups));
    return rcpp_result_gen;
END_RCPP
}
// wc_fp_cpp
arma::vec wc_fp_cpp(List zList, const arma::vec& b, const IntegerVector& wgroups, List XX_list, List y_list, const IntegerVector& gee);
RcppExport SEXP _gfe_wc_fp_cpp(SEXP zListSEXP, SEXP bSEXP, SEXP wgroupsSEXP, SEXP XX_listSEXP, SEXP y_listSEXP, SEXP geeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type zList(zListSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type wgroups(wgroupsSEXP);
    Rcpp::traits::input_parameter< List >::type XX_list(XX_listSEXP);
    Rcpp::traits::input_parameter< List >::type y_list(y_listSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type gee(geeSEXP);
    rcpp_result_gen = Rcpp::wrap(wc_fp_cpp(zList, b, wgroups, XX_list, y_list, gee));
    return rcpp_result_gen;
END_RCPP
}
// wc_fp_bs_cpp
NumericVector wc_fp_bs_cpp(List z, NumericVector b, double s, IntegerVector groups, List XX_demeaned, List y_demeaned, NumericVector sigs);
RcppExport SEXP _gfe_wc_fp_bs_cpp(SEXP zSEXP, SEXP bSEXP, SEXP sSEXP, SEXP groupsSEXP, SEXP XX_demeanedSEXP, SEXP y_demeanedSEXP, SEXP sigsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< List >::type XX_demeaned(XX_demeanedSEXP);
    Rcpp::traits::input_parameter< List >::type y_demeaned(y_demeanedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigs(sigsSEXP);
    rcpp_result_gen = Rcpp::wrap(wc_fp_bs_cpp(z, b, s, groups, XX_demeaned, y_demeaned, sigs));
    return rcpp_result_gen;
END_RCPP
}
// wc_fp_loop_cpp
arma::vec wc_fp_loop_cpp(List zList, const IntegerVector& wgroups, List XX_list, List y_list, const IntegerVector& gee, double tol, int max_iter);
RcppExport SEXP _gfe_wc_fp_loop_cpp(SEXP zListSEXP, SEXP wgroupsSEXP, SEXP XX_listSEXP, SEXP y_listSEXP, SEXP geeSEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type zList(zListSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type wgroups(wgroupsSEXP);
    Rcpp::traits::input_parameter< List >::type XX_list(XX_listSEXP);
    Rcpp::traits::input_parameter< List >::type y_list(y_listSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type gee(geeSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(wc_fp_loop_cpp(zList, wgroups, XX_list, y_list, gee, tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// gfeJump_cpp
arma::vec gfeJump_cpp(IntegerVector replaceR, int i, IntegerVector grR, NumericMatrix Z_N, NumericMatrix alpha_N);
RcppExport SEXP _gfe_gfeJump_cpp(SEXP replaceRSEXP, SEXP iSEXP, SEXP grRSEXP, SEXP Z_NSEXP, SEXP alpha_NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type replaceR(replaceRSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type grR(grRSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Z_N(Z_NSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type alpha_N(alpha_NSEXP);
    rcpp_result_gen = Rcpp::wrap(gfeJump_cpp(replaceR, i, grR, Z_N, alpha_N));
    return rcpp_result_gen;
END_RCPP
}
// wgfe_loop_res_cpp
List wgfe_loop_res_cpp(List z, NumericVector b0, double sig0, IntegerVector wgroups, NumericVector sigsg, double tol, int maxiter);
RcppExport SEXP _gfe_wgfe_loop_res_cpp(SEXP zSEXP, SEXP b0SEXP, SEXP sig0SEXP, SEXP wgroupsSEXP, SEXP sigsgSEXP, SEXP tolSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type sig0(sig0SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type wgroups(wgroupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigsg(sigsgSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(wgfe_loop_res_cpp(z, b0, sig0, wgroups, sigsg, tol, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// wgfeJump_cpp
NumericVector wgfeJump_cpp(IntegerVector replace, int i, IntegerVector gr, NumericMatrix Z_, NumericMatrix alpha_);
RcppExport SEXP _gfe_wgfeJump_cpp(SEXP replaceSEXP, SEXP iSEXP, SEXP grSEXP, SEXP Z_SEXP, SEXP alpha_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type gr(grSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Z_(Z_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type alpha_(alpha_SEXP);
    rcpp_result_gen = Rcpp::wrap(wgfeJump_cpp(replace, i, gr, Z_, alpha_));
    return rcpp_result_gen;
END_RCPP
}
// wgfeJump_bs_cpp
NumericVector wgfeJump_bs_cpp(IntegerVector replace, int i, IntegerVector gr_in, const arma::mat& Z, const arma::mat& alpha, NumericVector sigs, double sig);
RcppExport SEXP _gfe_wgfeJump_bs_cpp(SEXP replaceSEXP, SEXP iSEXP, SEXP gr_inSEXP, SEXP ZSEXP, SEXP alphaSEXP, SEXP sigsSEXP, SEXP sigSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type gr_in(gr_inSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigs(sigsSEXP);
    Rcpp::traits::input_parameter< double >::type sig(sigSEXP);
    rcpp_result_gen = Rcpp::wrap(wgfeJump_bs_cpp(replace, i, gr_in, Z, alpha, sigs, sig));
    return rcpp_result_gen;
END_RCPP
}
// assignGroups_cpp
Rcpp::IntegerVector assignGroups_cpp(const Rcpp::List& zList, const Rcpp::NumericMatrix& theta, const arma::mat& alpha);
RcppExport SEXP _gfe_assignGroups_cpp(SEXP zListSEXP, SEXP thetaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type zList(zListSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(assignGroups_cpp(zList, theta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// assignGroups_wgfe_cpp
Rcpp::IntegerVector assignGroups_wgfe_cpp(const Rcpp::List& zList, const Rcpp::NumericMatrix& theta, const arma::mat& Alpha, const arma::vec& SigmaG);
RcppExport SEXP _gfe_assignGroups_wgfe_cpp(SEXP zListSEXP, SEXP thetaSEXP, SEXP AlphaSEXP, SEXP SigmaGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type zList(zListSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Alpha(AlphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SigmaG(SigmaGSEXP);
    rcpp_result_gen = Rcpp::wrap(assignGroups_wgfe_cpp(zList, theta, Alpha, SigmaG));
    return rcpp_result_gen;
END_RCPP
}
// assignGroups_res_cpp
arma::uvec assignGroups_res_cpp(const arma::mat& Z, const arma::mat& alpha, const arma::vec& sigsg, double sig0);
RcppExport SEXP _gfe_assignGroups_res_cpp(SEXP ZSEXP, SEXP alphaSEXP, SEXP sigsgSEXP, SEXP sig0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigsg(sigsgSEXP);
    Rcpp::traits::input_parameter< double >::type sig0(sig0SEXP);
    rcpp_result_gen = Rcpp::wrap(assignGroups_res_cpp(Z, alpha, sigsg, sig0));
    return rcpp_result_gen;
END_RCPP
}
// refineGroups_cpp
Rcpp::IntegerVector refineGroups_cpp(Rcpp::List zList, Rcpp::IntegerVector wgroups, bool heterogeneous, const std::string& method);
RcppExport SEXP _gfe_refineGroups_cpp(SEXP zListSEXP, SEXP wgroupsSEXP, SEXP heterogeneousSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type zList(zListSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type wgroups(wgroupsSEXP);
    Rcpp::traits::input_parameter< bool >::type heterogeneous(heterogeneousSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(refineGroups_cpp(zList, wgroups, heterogeneous, method));
    return rcpp_result_gen;
END_RCPP
}
// refineGroups_res_cpp
List refineGroups_res_cpp(List zList, IntegerVector wgroups, double sig0, NumericVector sigsg);
RcppExport SEXP _gfe_refineGroups_res_cpp(SEXP zListSEXP, SEXP wgroupsSEXP, SEXP sig0SEXP, SEXP sigsgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type zList(zListSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type wgroups(wgroupsSEXP);
    Rcpp::traits::input_parameter< double >::type sig0(sig0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigsg(sigsgSEXP);
    rcpp_result_gen = Rcpp::wrap(refineGroups_res_cpp(zList, wgroups, sig0, sigsg));
    return rcpp_result_gen;
END_RCPP
}
// localJump_cpp
IntegerVector localJump_cpp(IntegerVector wgroups, arma::mat Z, arma::mat alpha, IntegerVector gee, const std::string& method);
RcppExport SEXP _gfe_localJump_cpp(SEXP wgroupsSEXP, SEXP ZSEXP, SEXP alphaSEXP, SEXP geeSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type wgroups(wgroupsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type gee(geeSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(localJump_cpp(wgroups, Z, alpha, gee, method));
    return rcpp_result_gen;
END_RCPP
}
// localJump_res_cpp
IntegerVector localJump_res_cpp(List zList, NumericVector theta0, IntegerVector wgroups, NumericVector sigsg, double sig0);
RcppExport SEXP _gfe_localJump_res_cpp(SEXP zListSEXP, SEXP theta0SEXP, SEXP wgroupsSEXP, SEXP sigsgSEXP, SEXP sig0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type zList(zListSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type wgroups(wgroupsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigsg(sigsgSEXP);
    Rcpp::traits::input_parameter< double >::type sig0(sig0SEXP);
    rcpp_result_gen = Rcpp::wrap(localJump_res_cpp(zList, theta0, wgroups, sigsg, sig0));
    return rcpp_result_gen;
END_RCPP
}
// se_cpp
arma::vec se_cpp(const NumericVector& Y, const NumericMatrix& X, const NumericVector& theta0, const IntegerVector& groupR, const NumericMatrix& alpha0, const NumericVector& sigma0, int t);
RcppExport SEXP _gfe_se_cpp(SEXP YSEXP, SEXP XSEXP, SEXP theta0SEXP, SEXP groupRSEXP, SEXP alpha0SEXP, SEXP sigma0SEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type groupR(groupRSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma0(sigma0SEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(se_cpp(Y, X, theta0, groupR, alpha0, sigma0, t));
    return rcpp_result_gen;
END_RCPP
}
// seHet_cpp
Rcpp::NumericMatrix seHet_cpp(const Rcpp::List& zList, const Rcpp::NumericMatrix& theta, const Rcpp::IntegerVector& groupR, const Rcpp::NumericMatrix& alpha0);
RcppExport SEXP _gfe_seHet_cpp(SEXP zListSEXP, SEXP thetaSEXP, SEXP groupRSEXP, SEXP alpha0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type zList(zListSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type groupR(groupRSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type alpha0(alpha0SEXP);
    rcpp_result_gen = Rcpp::wrap(seHet_cpp(zList, theta, groupR, alpha0));
    return rcpp_result_gen;
END_RCPP
}
// computeZ_unbalanced_cpp
arma::mat computeZ_unbalanced_cpp(const List& zList, const NumericMatrix& theta, const IntegerVector& groups);
RcppExport SEXP _gfe_computeZ_unbalanced_cpp(SEXP zListSEXP, SEXP thetaSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type zList(zListSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(computeZ_unbalanced_cpp(zList, theta, groups));
    return rcpp_result_gen;
END_RCPP
}
// computeAlpha_unbalanced_cpp
List computeAlpha_unbalanced_cpp(const arma::mat& Zall, const IntegerVector groups);
RcppExport SEXP _gfe_computeAlpha_unbalanced_cpp(SEXP ZallSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Zall(ZallSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(computeAlpha_unbalanced_cpp(Zall, groups));
    return rcpp_result_gen;
END_RCPP
}
// computeSigma_unbalanced_cpp
arma::vec computeSigma_unbalanced_cpp(const arma::mat& Zall, const arma::mat& alpha, const IntegerVector& groups);
RcppExport SEXP _gfe_computeSigma_unbalanced_cpp(SEXP ZallSEXP, SEXP alphaSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Zall(ZallSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(computeSigma_unbalanced_cpp(Zall, alpha, groups));
    return rcpp_result_gen;
END_RCPP
}
// gfeObj_unbalanced_cpp
double gfeObj_unbalanced_cpp(const arma::mat& Zall, const IntegerVector& groups);
RcppExport SEXP _gfe_gfeObj_unbalanced_cpp(SEXP ZallSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Zall(ZallSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(gfeObj_unbalanced_cpp(Zall, groups));
    return rcpp_result_gen;
END_RCPP
}
// wgfeObj_unbalanced_cpp
double wgfeObj_unbalanced_cpp(const arma::mat& Zall, const IntegerVector& groups);
RcppExport SEXP _gfe_wgfeObj_unbalanced_cpp(SEXP ZallSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Zall(ZallSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(wgfeObj_unbalanced_cpp(Zall, groups));
    return rcpp_result_gen;
END_RCPP
}
// slopeGradGFE_unbalanced_cpp
arma::vec slopeGradGFE_unbalanced_cpp(List z, IntegerVector group);
RcppExport SEXP _gfe_slopeGradGFE_unbalanced_cpp(SEXP zSEXP, SEXP groupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type z(zSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type group(groupSEXP);
    rcpp_result_gen = Rcpp::wrap(slopeGradGFE_unbalanced_cpp(z, group));
    return rcpp_result_gen;
END_RCPP
}
// computeXXY_demeaned_unbalanced_cpp
List computeXXY_demeaned_unbalanced_cpp(List zList, const IntegerVector& wgroups);
RcppExport SEXP _gfe_computeXXY_demeaned_unbalanced_cpp(SEXP zListSEXP, SEXP wgroupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type zList(zListSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type wgroups(wgroupsSEXP);
    rcpp_result_gen = Rcpp::wrap(computeXXY_demeaned_unbalanced_cpp(zList, wgroups));
    return rcpp_result_gen;
END_RCPP
}
// wc_fp_unbalanced_cpp
arma::vec wc_fp_unbalanced_cpp(List zList, const arma::vec& b, const IntegerVector& wgroups, List XX_list, List y_list, const IntegerVector& gee);
RcppExport SEXP _gfe_wc_fp_unbalanced_cpp(SEXP zListSEXP, SEXP bSEXP, SEXP wgroupsSEXP, SEXP XX_listSEXP, SEXP y_listSEXP, SEXP geeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type zList(zListSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type wgroups(wgroupsSEXP);
    Rcpp::traits::input_parameter< List >::type XX_list(XX_listSEXP);
    Rcpp::traits::input_parameter< List >::type y_list(y_listSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type gee(geeSEXP);
    rcpp_result_gen = Rcpp::wrap(wc_fp_unbalanced_cpp(zList, b, wgroups, XX_list, y_list, gee));
    return rcpp_result_gen;
END_RCPP
}
// wc_fp_loop_unbalanced_cpp
arma::vec wc_fp_loop_unbalanced_cpp(List zList, const IntegerVector& wgroups, List XX_list, List y_list, const IntegerVector& gee, double tol, int max_iter);
RcppExport SEXP _gfe_wc_fp_loop_unbalanced_cpp(SEXP zListSEXP, SEXP wgroupsSEXP, SEXP XX_listSEXP, SEXP y_listSEXP, SEXP geeSEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type zList(zListSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type wgroups(wgroupsSEXP);
    Rcpp::traits::input_parameter< List >::type XX_list(XX_listSEXP);
    Rcpp::traits::input_parameter< List >::type y_list(y_listSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type gee(geeSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(wc_fp_loop_unbalanced_cpp(zList, wgroups, XX_list, y_list, gee, tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// calcGroupSlopes_unbalanced_cpp
arma::mat calcGroupSlopes_unbalanced_cpp(const List& zList, const IntegerVector& groups);
RcppExport SEXP _gfe_calcGroupSlopes_unbalanced_cpp(SEXP zListSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type zList(zListSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(calcGroupSlopes_unbalanced_cpp(zList, groups));
    return rcpp_result_gen;
END_RCPP
}
// gfeJump_unbalanced_cpp
arma::vec gfeJump_unbalanced_cpp(const IntegerVector& replaceR, int i, const IntegerVector& grR, const NumericMatrix& Z_N);
RcppExport SEXP _gfe_gfeJump_unbalanced_cpp(SEXP replaceRSEXP, SEXP iSEXP, SEXP grRSEXP, SEXP Z_NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type replaceR(replaceRSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type grR(grRSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Z_N(Z_NSEXP);
    rcpp_result_gen = Rcpp::wrap(gfeJump_unbalanced_cpp(replaceR, i, grR, Z_N));
    return rcpp_result_gen;
END_RCPP
}
// wgfeJump_unbalanced_cpp
NumericVector wgfeJump_unbalanced_cpp(const IntegerVector& replaceR, int i, const IntegerVector& grR, const NumericMatrix& Z_N, const NumericMatrix& alpha_N);
RcppExport SEXP _gfe_wgfeJump_unbalanced_cpp(SEXP replaceRSEXP, SEXP iSEXP, SEXP grRSEXP, SEXP Z_NSEXP, SEXP alpha_NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type replaceR(replaceRSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type grR(grRSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Z_N(Z_NSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type alpha_N(alpha_NSEXP);
    rcpp_result_gen = Rcpp::wrap(wgfeJump_unbalanced_cpp(replaceR, i, grR, Z_N, alpha_N));
    return rcpp_result_gen;
END_RCPP
}
// localJump_unbalanced_cpp
IntegerVector localJump_unbalanced_cpp(const IntegerVector& wgroups_, const arma::mat& Z, const IntegerVector& gee_, const std::string& method);
RcppExport SEXP _gfe_localJump_unbalanced_cpp(SEXP wgroups_SEXP, SEXP ZSEXP, SEXP gee_SEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type wgroups_(wgroups_SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type gee_(gee_SEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(localJump_unbalanced_cpp(wgroups_, Z, gee_, method));
    return rcpp_result_gen;
END_RCPP
}
// localJump_het_unbalanced_cpp
IntegerVector localJump_het_unbalanced_cpp(IntegerVector wgroups, Rcpp::List zList, const IntegerVector& gee, const std::string& method);
RcppExport SEXP _gfe_localJump_het_unbalanced_cpp(SEXP wgroupsSEXP, SEXP zListSEXP, SEXP geeSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type wgroups(wgroupsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type zList(zListSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type gee(geeSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(localJump_het_unbalanced_cpp(wgroups, zList, gee, method));
    return rcpp_result_gen;
END_RCPP
}
// assignGroups_unbalanced_cpp
Rcpp::IntegerVector assignGroups_unbalanced_cpp(const Rcpp::List& zList, const Rcpp::NumericMatrix& theta, const arma::mat& alpha);
RcppExport SEXP _gfe_assignGroups_unbalanced_cpp(SEXP zListSEXP, SEXP thetaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type zList(zListSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(assignGroups_unbalanced_cpp(zList, theta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// assignGroups_wgfe_unbalanced_cpp
Rcpp::IntegerVector assignGroups_wgfe_unbalanced_cpp(const Rcpp::List& zList, const Rcpp::NumericMatrix theta, const arma::mat& Alpha, const arma::vec& SigmaG);
RcppExport SEXP _gfe_assignGroups_wgfe_unbalanced_cpp(SEXP zListSEXP, SEXP thetaSEXP, SEXP AlphaSEXP, SEXP SigmaGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type zList(zListSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Alpha(AlphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SigmaG(SigmaGSEXP);
    rcpp_result_gen = Rcpp::wrap(assignGroups_wgfe_unbalanced_cpp(zList, theta, Alpha, SigmaG));
    return rcpp_result_gen;
END_RCPP
}
// refineGroups_unbalanced_cpp
Rcpp::IntegerVector refineGroups_unbalanced_cpp(const Rcpp::List& zList, Rcpp::IntegerVector wgroups, bool heterogeneous, const std::string& method);
RcppExport SEXP _gfe_refineGroups_unbalanced_cpp(SEXP zListSEXP, SEXP wgroupsSEXP, SEXP heterogeneousSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type zList(zListSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type wgroups(wgroupsSEXP);
    Rcpp::traits::input_parameter< bool >::type heterogeneous(heterogeneousSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(refineGroups_unbalanced_cpp(zList, wgroups, heterogeneous, method));
    return rcpp_result_gen;
END_RCPP
}
// se_unbalanced_cpp
arma::vec se_unbalanced_cpp(const Rcpp::NumericVector& Y, const Rcpp::NumericMatrix& X, const Rcpp::NumericVector& theta0, const Rcpp::IntegerVector& groupR, const Rcpp::NumericMatrix& alpha0, const Rcpp::NumericVector& sigma0, int t);
RcppExport SEXP _gfe_se_unbalanced_cpp(SEXP YSEXP, SEXP XSEXP, SEXP theta0SEXP, SEXP groupRSEXP, SEXP alpha0SEXP, SEXP sigma0SEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type groupR(groupRSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type sigma0(sigma0SEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(se_unbalanced_cpp(Y, X, theta0, groupR, alpha0, sigma0, t));
    return rcpp_result_gen;
END_RCPP
}
// seHet_unbalanced_cpp
Rcpp::NumericMatrix seHet_unbalanced_cpp(const Rcpp::List& zList, const Rcpp::NumericMatrix& theta0, const Rcpp::IntegerVector& groupR, const Rcpp::NumericMatrix& alpha0);
RcppExport SEXP _gfe_seHet_unbalanced_cpp(SEXP zListSEXP, SEXP theta0SEXP, SEXP groupRSEXP, SEXP alpha0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type zList(zListSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type groupR(groupRSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type alpha0(alpha0SEXP);
    rcpp_result_gen = Rcpp::wrap(seHet_unbalanced_cpp(zList, theta0, groupR, alpha0));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gfe_computeZ_cpp", (DL_FUNC) &_gfe_computeZ_cpp, 3},
    {"_gfe_computeZ_res_cpp", (DL_FUNC) &_gfe_computeZ_res_cpp, 2},
    {"_gfe_computeAlpha_cpp", (DL_FUNC) &_gfe_computeAlpha_cpp, 2},
    {"_gfe_computeSigma_cpp", (DL_FUNC) &_gfe_computeSigma_cpp, 3},
    {"_gfe_computeResiduals_cpp", (DL_FUNC) &_gfe_computeResiduals_cpp, 4},
    {"_gfe_gfeObj_cpp", (DL_FUNC) &_gfe_gfeObj_cpp, 2},
    {"_gfe_wgfeObj_cpp", (DL_FUNC) &_gfe_wgfeObj_cpp, 2},
    {"_gfe_wgfeObj_bs_cpp", (DL_FUNC) &_gfe_wgfeObj_bs_cpp, 5},
    {"_gfe_slopeGradGFE_cpp", (DL_FUNC) &_gfe_slopeGradGFE_cpp, 2},
    {"_gfe_calcGroupSlopes_cpp", (DL_FUNC) &_gfe_calcGroupSlopes_cpp, 2},
    {"_gfe_computeXXY_demeaned_cpp", (DL_FUNC) &_gfe_computeXXY_demeaned_cpp, 2},
    {"_gfe_wc_fp_cpp", (DL_FUNC) &_gfe_wc_fp_cpp, 6},
    {"_gfe_wc_fp_bs_cpp", (DL_FUNC) &_gfe_wc_fp_bs_cpp, 7},
    {"_gfe_wc_fp_loop_cpp", (DL_FUNC) &_gfe_wc_fp_loop_cpp, 7},
    {"_gfe_gfeJump_cpp", (DL_FUNC) &_gfe_gfeJump_cpp, 5},
    {"_gfe_wgfe_loop_res_cpp", (DL_FUNC) &_gfe_wgfe_loop_res_cpp, 7},
    {"_gfe_wgfeJump_cpp", (DL_FUNC) &_gfe_wgfeJump_cpp, 5},
    {"_gfe_wgfeJump_bs_cpp", (DL_FUNC) &_gfe_wgfeJump_bs_cpp, 7},
    {"_gfe_assignGroups_cpp", (DL_FUNC) &_gfe_assignGroups_cpp, 3},
    {"_gfe_assignGroups_wgfe_cpp", (DL_FUNC) &_gfe_assignGroups_wgfe_cpp, 4},
    {"_gfe_assignGroups_res_cpp", (DL_FUNC) &_gfe_assignGroups_res_cpp, 4},
    {"_gfe_refineGroups_cpp", (DL_FUNC) &_gfe_refineGroups_cpp, 4},
    {"_gfe_refineGroups_res_cpp", (DL_FUNC) &_gfe_refineGroups_res_cpp, 4},
    {"_gfe_localJump_cpp", (DL_FUNC) &_gfe_localJump_cpp, 5},
    {"_gfe_localJump_res_cpp", (DL_FUNC) &_gfe_localJump_res_cpp, 5},
    {"_gfe_se_cpp", (DL_FUNC) &_gfe_se_cpp, 7},
    {"_gfe_seHet_cpp", (DL_FUNC) &_gfe_seHet_cpp, 4},
    {"_gfe_computeZ_unbalanced_cpp", (DL_FUNC) &_gfe_computeZ_unbalanced_cpp, 3},
    {"_gfe_computeAlpha_unbalanced_cpp", (DL_FUNC) &_gfe_computeAlpha_unbalanced_cpp, 2},
    {"_gfe_computeSigma_unbalanced_cpp", (DL_FUNC) &_gfe_computeSigma_unbalanced_cpp, 3},
    {"_gfe_gfeObj_unbalanced_cpp", (DL_FUNC) &_gfe_gfeObj_unbalanced_cpp, 2},
    {"_gfe_wgfeObj_unbalanced_cpp", (DL_FUNC) &_gfe_wgfeObj_unbalanced_cpp, 2},
    {"_gfe_slopeGradGFE_unbalanced_cpp", (DL_FUNC) &_gfe_slopeGradGFE_unbalanced_cpp, 2},
    {"_gfe_computeXXY_demeaned_unbalanced_cpp", (DL_FUNC) &_gfe_computeXXY_demeaned_unbalanced_cpp, 2},
    {"_gfe_wc_fp_unbalanced_cpp", (DL_FUNC) &_gfe_wc_fp_unbalanced_cpp, 6},
    {"_gfe_wc_fp_loop_unbalanced_cpp", (DL_FUNC) &_gfe_wc_fp_loop_unbalanced_cpp, 7},
    {"_gfe_calcGroupSlopes_unbalanced_cpp", (DL_FUNC) &_gfe_calcGroupSlopes_unbalanced_cpp, 2},
    {"_gfe_gfeJump_unbalanced_cpp", (DL_FUNC) &_gfe_gfeJump_unbalanced_cpp, 4},
    {"_gfe_wgfeJump_unbalanced_cpp", (DL_FUNC) &_gfe_wgfeJump_unbalanced_cpp, 5},
    {"_gfe_localJump_unbalanced_cpp", (DL_FUNC) &_gfe_localJump_unbalanced_cpp, 4},
    {"_gfe_localJump_het_unbalanced_cpp", (DL_FUNC) &_gfe_localJump_het_unbalanced_cpp, 4},
    {"_gfe_assignGroups_unbalanced_cpp", (DL_FUNC) &_gfe_assignGroups_unbalanced_cpp, 3},
    {"_gfe_assignGroups_wgfe_unbalanced_cpp", (DL_FUNC) &_gfe_assignGroups_wgfe_unbalanced_cpp, 4},
    {"_gfe_refineGroups_unbalanced_cpp", (DL_FUNC) &_gfe_refineGroups_unbalanced_cpp, 4},
    {"_gfe_se_unbalanced_cpp", (DL_FUNC) &_gfe_se_unbalanced_cpp, 7},
    {"_gfe_seHet_unbalanced_cpp", (DL_FUNC) &_gfe_seHet_unbalanced_cpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_gfe(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
